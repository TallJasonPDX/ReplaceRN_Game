Step 1: Fix the Rendering Issue
The current App.js is set up with RNGE, but Expo Router (configured in app.json and the app/ directory) might be overriding it. Since this is a single-screen game, we don’t need Expo Router’s multi-page navigation. Let’s simplify the entry point.
Actions:
Replace expo-router/entry with App.js as the main entry:
Update package.json:
json
"main": "App.js",
This tells Expo to use App.js directly instead of the router.
Remove or disable Expo Router:
Delete the app/ directory (app/_layout.tsx, app/+not-found.tsx, app/(tabs)/) since we won’t use file-based routing.

Remove "expo-router" from app.json’s "plugins" array:
json
"plugins": [
  [
    "expo-splash-screen",
    {
      "image": "./assets/images/splash-icon.png",
      "imageWidth": 200,
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    }
  ]
],
Test the Fix:
Run npx expo start again. You should now see the game UI (a gray syringe at the bottom, red nurses spawning from the top, and a gray background) instead of JSON.
Step 2: Enhance Core Gameplay Mechanics
Your current setup has a syringe, nurses spawning, and basic bullet shooting, but it lacks the slingshot mechanic, depth simulation, obstacles, and collision detection. Let’s build these out.
Actions:
Add Slingshot Mechanic:
Modify TouchControls.js to track pull-back distance and launch bullets with variable speed:
javascript
import { PanGestureHandler } from 'react-native-gesture-handler';
import Bullet from '../components/Bullet';

const TouchControls = (entities, { dispatch }) => {
  const syringe = entities.syringe;
  let pullBack = 0;

  return {
    onGestureEvent: (event) => {
      const { translationX, translationY } = event.nativeEvent;
      // Slide syringe left/right
      syringe.position[0] = Math.max(0, Math.min(translationX + width / 2 - 20, width - 40));
    },
    onHandlerStateChange: (event) => {
      const { state, translationY } = event.nativeEvent;
      if (state === 2) { // BEGAN
        pullBack = 0;
      } else if (state === 4) { // ACTIVE
        pullBack = Math.min(translationY * -1, 100); // Limit pull-back to 100px
      } else if (state === 5) { // END
        if (pullBack > 10) { // Minimum pull-back to shoot
          const bulletId = `bullet-${Date.now()}`;
          entities[bulletId] = {
            position: [syringe.position[0] + 15, height - 60],
            speed: pullBack / 10, // Speed based on pull-back (max 10)
            renderer: <Bullet />,
          };
        }
      }
    },
  };
};

// Update App.js to use PanGestureHandler
import { PanGestureHandler } from 'react-native-gesture-handler';

export default function App() {
  const [gameEngine, setGameEngine] = useState(null);
  const touchControls = TouchControls; // Pass as ref

  return (
    <GestureHandlerRootView style={styles.container}>
      <PanGestureHandler
        onGestureEvent={(e) => gameEngine?.dispatch({ type: 'gesture', event: e })}
        onHandlerStateChange={(e) => gameEngine?.dispatch({ type: 'state', event: e })}
      >
        <View style={styles.game}>
          <GameEngine
            ref={setGameEngine}
            style={styles.game}
            entities={getEntities()}
            systems={[MoveNurses, ShootSystem, (entities, args) => touchControls(entities, args)]}
            running={running}
            onEvent={onEvent}
          />
          {/* Score and Game Over UI */}
        </View>
      </PanGestureHandler>
    </GestureHandlerRootView>
  );
}
Simulate Depth with Scaling:
Already in MoveNurses.js, but tweak the scaling for better effect:
javascript
const MoveNurses = (entities, { time }) => {
  const nurses = Object.keys(entities).filter(key => key.includes('nurse'));
  nurses.forEach(nurseKey => {
    const nurse = entities[nurseKey];
    nurse.position[1] += nurse.speed * (time.delta / 1000);
    nurse.size = 20 + (height - nurse.position[1]) / 20; // Larger as it gets closer
    if (nurse.position[1] > height) {
      entities['game'].dispatch({ type: 'game-over' });
      delete entities[nurseKey];
    }
  });
  return entities;
};
Add Collision Detection:
Update ShootSystem.js to check bullet-nurse collisions:
javascript
const ShootSystem = (entities, { dispatch }) => {
  const bullets = Object.keys(entities).filter(key => key.includes('bullet'));
  const nurses = Object.keys(entities).filter(key => key.includes('nurse'));

  bullets.forEach(bulletKey => {
    const bullet = entities[bulletKey];
    bullet.position[1] -= bullet.speed;

    nurses.forEach(nurseKey => {
      const nurse = entities[nurseKey];
      const hit = (
        bullet.position[0] >= nurse.position[0] - nurse.size / 2 &&
        bullet.position[0] <= nurse.position[0] + nurse.size / 2 &&
        bullet.position[1] <= nurse.position[1] + nurse.size &&
        bullet.position[1] >= nurse.position[1]
      );
      if (hit) {
        delete entities[bulletKey];
        delete entities[nurseKey];
        dispatch({ type: 'score' });
      }
    });

    if (bullet.position[1] < 0) delete entities[bulletKey];
  });

  return entities;
};
Handle Obstacles:
Add collision logic in ShootSystem.js to stop bullets at obstacles:
javascript
const obstacles = Object.keys(entities).filter(key => key.includes('obstacle'));
bullets.forEach(bulletKey => {
  const bullet = entities[bulletKey];
  obstacles.forEach(obstacleKey => {
    const obs = entities[obstacleKey];
    if (
      bullet.position[0] >= obs.position[0] &&
      bullet.position[0] <= obs.position[0] + obs.width &&
      bullet.position[1] <= obs.position[1] + obs.height &&
      bullet.position[1] >= obs.position[1]
    ) {
      delete entities[bulletKey];
    }
  });
});
Step 3: Add Visual Polish
The game works mechanically, but it’s just colored boxes. Let’s make it look like a hospital hallway.
Actions:
Add Background Image:
Download a hospital hallway image (e.g., from OpenGameArt.org) and place it in assets/images/hallway.png.

Update App.js’s background entity:
javascript
import { ImageBackground } from 'react-native';

const getEntities = () => ({
  // ...
  background: {
    position: [0, 0],
    width,
    height,
    renderer: <ImageBackground source={require('../../assets/images/hallway.png')} style={{ flex: 1 }} />,
  },
}));
Use Sprites for Entities:
Replace colored boxes with images (e.g., syringe.png, nurse.png, bullet.png, bed.png) in assets/images/.

Update components (e.g., Syringe.js):
javascript
import { Image } from 'react-native';

const Syringe = ({ position }) => (
  <Image source={require('../../assets/images/syringe.png')} style={[styles.syringe, { left: position[0] }]} />
);

const styles = StyleSheet.create({
  syringe: { position: 'absolute', bottom: 0, width: 40, height: 40 },
});
Step 4: Add Patients and Nurse Pathing
Patients cross the hallway, and nurses dodge obstacles.
Actions:
Add Patient Entities:
In App.js, add a patient spawn interval:
javascript
useEffect(() => {
  if (running) {
    const patientInterval = setInterval(() => {
      const patientId = `patient-${Date.now()}`;
      gameEngine.dispatch({
        type: 'add-entity',
        entity: {
          id: patientId,
          position: [-50, height / 2 + Math.random() * 200 - 100],
          width: 40,
          height: 40,
          speed: 50,
          renderer: <Obstacle />, // Use Obstacle for now; replace with patient sprite later
        },
      });
    }, 5000);
    return () => clearInterval(patientInterval);
  }
}, [running, gameEngine]);
Move Patients and Nurses Around Obstacles:
Create MoveObstacles.js:
javascript
const MoveObstacles = (entities, { time }) => {
  const patients = Object.keys(entities).filter(key => key.includes('patient'));
  patients.forEach(key => {
    const patient = entities[key];
    patient.position[0] += patient.speed * (time.delta / 1000);
    if (patient.position[0] > width) delete entities[key];
  });
  return entities;
};
export default MoveObstacles;
Update MoveNurses.js for obstacle avoidance:
javascript
const MoveNurses = (entities, { time }) => {
  const nurses = Object.keys(entities).filter(key => key.includes('nurse'));
  const obstacles = Object.keys(entities).filter(key => key.includes('obstacle'));

  nurses.forEach(nurseKey => {
    const nurse = entities[nurseKey];
    nurse.position[1] += nurse.speed * (time.delta / 1000);
    nurse.size = 20 + (height - nurse.position[1]) / 20;

    obstacles.forEach(obsKey => {
      const obs = entities[obsKey];
      if (
        nurse.position[1] + nurse.size > obs.position[1] &&
        nurse.position[1] < obs.position[1] + obs.height &&
        nurse.position[0] + nurse.size > obs.position[0] &&
        nurse.position[0] < obs.position[0] + obs.width
      ) {
        nurse.position[0] += nurse.speed * (time.delta / 1000) * (nurse.position[0] < width / 2 ? -1 : 1);
      }
    });

    if (nurse.position[1] > height) {
      entities['game'].dispatch({ type: 'game-over' });
      delete entities[nurseKey];
    }
  });
  return entities;
};
Add MoveObstacles to GameEngine systems in App.js.
